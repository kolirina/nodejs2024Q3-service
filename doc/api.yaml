openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: 'password'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - password
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'ColdPlay'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Parachutes'
        year:
          type: integer
          example: 2000
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Don't Panic
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Login
      security: []
      summary: Login
      description: Logs the user in and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: JWT Token
        403:
          description: Invalid login or password
  /signup:
    post:
      tags:
        - Signup
      security: []
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  minLength: 3
                  maxLength: 255
                  description: Username
                password:
                  type: string
                  format: password
                  pattern: ^[a-zA-Z0-9]{3,30}
                  description: Password
              required:
                - login
                - password
      responses:
        204:
          description: User successfully registered
        400:
          description: Bad request
        409:
          description: User with the given login already exists
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. Missing required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Retrieve user by ID
      description: Fetch a single user's details using their unique identifier.
      responses:
        200:
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. The userId is invalid or not in UUID format.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: The requested user was not found.

    put:
      tags:
        - Users
      summary: Update a user's password
      description: Modify an existing user's password using their ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The current password of the user.
                newPassword:
                  type: string
                  description: The current password of the user.
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The current password of the user.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
        400:
          description: Bad request. The userId is invalid or not in UUID format.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: The provided oldPassword is incorrect.
        404:
          description: The user with the specified ID was not found.
    delete:
      tags:
        - Users
      summary: Delete user
      description: Permanently delete a user from the system by their unique identifier.
      responses:
      204:
        description: The user was successfully deleted.
      400:
        description: Bad request. The userId is invalid or not in UUID format.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: The user with the specified ID was not found.

/track:
  get:
    tags:
      - Track
    summary: Retrieve all tracks
    description: Fetch the complete list of tracks from the music library.
    responses:
      200:
        description: Successfully retrieved all tracks.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Track'
      401:
        $ref: '#/components/responses/UnauthorizedError'
  post:
    tags:
      - Track
    summary: Add a new track
    description: Create a new track entry by providing the necessary details.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            title: Track Details
            properties:
              name:
                type: string
                description: The name of the track.
              artistId:
                type: string
                format: uuid
                description: The unique identifier of the artist.
              albumId:
                type: string
                format: uuid
                description: The unique identifier of the album.
              duration:
                type: integer
                description: Duration of the track in seconds.
            required:
              - name
              - duration
    responses:
      201:
        description: The track was successfully created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      400:
        description: Bad request. The body does not contain the required fields.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: The provided track ID does not exist.

/track/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  get:
    tags:
      - Track
    summary: Retrieve track by ID
    description: Fetch a single track's details from the library using its unique identifier (UUID).
    responses:
      200:
        description: Successfully retrieved the track.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      400:
        description: Bad request. The trackId is invalid or not in UUID format.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: The track with the specified ID was not found.
  put:
    tags:
      - Track
    summary: Update track details
    description: Modify the information of a track in the library by its unique identifier (UUID).
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            title: Track Update Information
            properties:
              name:
                type: string
                example: Bohemian Rhapsody
                description: The name of the track.
              artistId:
                type: string
                format: uuid
                nullable: true
                description: The unique identifier of the artist.
              duration:
                type: integer
                description: The duration of the track in seconds.
                example: 355
              albumId:
                type: string
                format: uuid
                nullable: true
                description: The unique identifier of the album.
            required:
              - name
              - duration
    responses:
      200:
        description: The track information was successfully updated.
        content:
          application/json:
            schema:
              type: object
              title: Updated Track Information
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: The duration of the track in seconds.
                  example: 355
                albumId:
                  type: string
                  format: uuid
                  nullable: true
      400:
        description: Bad request. The trackId is invalid or not in UUID format.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: The track with the specified ID was not found.
  delete:
    tags:
      - Track
    summary: Remove track by ID
    description: Permanently delete a track from the library using its unique identifier (UUID).
    responses:
      204:
        description: The track was successfully deleted.
      400:
        description: Bad request. The trackId is invalid or not in UUID format.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: The track with the specified ID was not found.

/album:
  get:
    tags:
      - Album
    summary: Retrieve all albums
    description: Fetch a list of all albums available in the library.
    responses:
      200:
        description: Successfully retrieved all albums.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Album'
      401:
        $ref: '#/components/responses/UnauthorizedError'
  post:
    tags:
      - Album
    summary: Add a new album
    description: Create a new album in the library by providing its details.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            title: Album Details
            properties:
              name:
                type: string
                description: The name of the album.
              year:
                type: integer
                description: The release year of the album.
              artistId:
                type: string
                format: uuid
                nullable: true
                description: The unique identifier of the artist (optional).
            required:
              - name
              - year
    responses:
      201:
        description: The album was successfully created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      400:
        description: Bad request. The body does not contain the required fields.
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: The artist or related data does not exist.

  /album/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  get:
    tags:
      - Album
    summary: Fetch details of a specific album by its identifier
    description: Retrieve information about a specific album using its unique ID.
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      400:
        description: Bad request. albumId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Album was not found.
  put:
    tags:
      - Album
    summary: Modify album details
    description: Update the album's information in the library using its unique identifier.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            title: example
            properties:
              name:
                type: string
              year:
                type: integer
              artistId:
                type: string
                format: uuid
                nullable: true
            required:
              - name
              - year
    responses:
      200:
        description: The album has been updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      400:
        description: Bad request. albumId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Album was not found.
      422:
        description: Album with id doesn't exist.
  delete:
    tags:
      - Album
    summary: Remove an album
    description: Permanently delete an album from the library using its unique ID.
    responses:
      204:
        description: Deleted successfully
      400:
        description: Bad request. albumId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Album was not found.

/artist:
  get:
    tags:
      - Artist
    summary: List all available artists
    description: Retrieve a collection of all artists in the library.
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Artist'
      401:
        $ref: '#/components/responses/UnauthorizedError'
  post:
    tags:
      - Artist
    summary: Create a new artist record
    description: Add a new artist entry to the library with the provided details.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              grammy:
                type: boolean
            required:
              - name
              - grammy
    responses:
      201:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      400:
        description: Bad request. body does not contain required fields
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: Album with id doesn't exist.

/artist/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  get:
    tags:
      - Artist
    summary: Get artist details by identifier
    description: Fetch information about a specific artist using their unique ID.
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      400:
        description: Bad request. artistId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Artist was not found.
  put:
    tags:
      - Artist
    summary: Update artist information
    description: Modify the details of an artist by their unique identifier.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              grammy:
                type: boolean
            required:
              - name
              - grammy
    responses:
      200:
        description: The artist has been updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      400:
        description: Bad request. artistId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Artist was not found.
      422:
        description: Artist with id doesn't exist.
  delete:
    tags:
      - Artist
    summary: Delete artist record
    description: Remove an artist from the library using their unique ID.
    responses:
      204:
        description: Deleted successfully
      400:
        description: Bad request. artistId is invalid (not uuid)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Artist was not found.

  /favs:
  get:
    tags:
      - Favorites
    summary: Retrieve all favorites
    description: Fetch a list of all favorite movies, tracks, and books for the user.
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favorites'
      401:
        $ref: '#/components/responses/UnauthorizedError'

/favs/track/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  post:
    tags:
      - Favorites
    summary: Add a track to favorites
    description: Add a track to the user's favorite list using its unique identifier.
    responses:
      201:
        description: Track added to favorites successfully
      400:
        description: Invalid trackId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: The track with the given ID does not exist.
  delete:
    tags:
      - Favorites
    summary: Remove track from favorites
    description: Remove a track from the user's favorite list using its unique identifier.
    responses:
      204:
        description: Track removed from favorites successfully
      400:
        description: Invalid trackId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Track was not found in favorites.

/favs/album/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  post:
    tags:
      - Favorites
    summary: Add an album to favorites
    description: Add an album to the user's favorite list using its unique identifier.
    responses:
      201:
        description: Album added to favorites successfully
      400:
        description: Invalid albumId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: The album with the given ID does not exist.
  delete:
    tags:
      - Favorites
    summary: Remove album from favorites
    description: Remove an album from the user's favorite list using its unique identifier.
    responses:
      204:
        description: Album removed from favorites successfully
      400:
        description: Invalid albumId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Album was not found in favorites.

/favs/artist/{id}:
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  post:
    tags:
      - Favorites
    summary: Add an artist to favorites
    description: Add an artist to the user's favorite list using their unique identifier.
    responses:
      201:
        description: Artist added to favorites successfully
      400:
        description: Invalid artistId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      422:
        description: The artist with the given ID does not exist.
  delete:
    tags:
      - Favorites
    summary: Remove artist from favorites
    description: Remove an artist from the user's favorite list using their unique identifier.
    responses:
      204:
        description: Artist removed from favorites successfully
      400:
        description: Invalid artistId (not a valid UUID)
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        description: Artist was not found in favorites.
